{"version":3,"sources":["Assets/crocodile-src.png","Assets/lizard-src.png","Assets/reptile-src.png","Assets/snake-src.png","Assets/turtle-src.png","ApiCalls.js","Components/BookCard/BookCard.js","Components/Inventory/Inventory.js","Components/EmbeddedBook/EmbeddedBook.js","Components/Header/Header.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchBooks","searchCriteria","a","urlParts","splice","url","join","fetch","response","json","data","ok","Error","statusText","fetchSingleBook","BookCard","books","category","viewType","filteredBooks","filter","book","accessInfo","embeddable","map","i","textSnippet","searchInfo","key","className","coverImg","src","medium","alt","volumeInfo","title","imageLinks","thumbnail","createCoverView","length","dangerouslySetInnerHTML","__html","authors","createSummaryView","to","id","style","textDecoration","aria-label","Inventory","singleBooks","getSingleBooks","setBooks","upperCaseCategory","toUpperCase","slice","onClick","images","EmbeddedBook","bookToRender","previewLink","history","useHistory","goBack","frameBorder","scrolling","border","width","height","role","Header","searchBooks","location","useLocation","pathname","split","urlCategory","imageSrcs","crocodile","lizard","reptile","snake","turtle","activeClassName","event","target","innerHTML","updateLocation","makeNavLinks","App","useState","error","setError","searchCritera","setSearchCriteria","loading","setLoading","useEffect","items","getBooks","categoryGiven","selfLink","forEach","getSingleBook","singleBook","bookToAddImg","find","booksWithImgs","s","path","render","match","params","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.00c0725d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crocodile-src.b993ed36.png\";","module.exports = __webpack_public_path__ + \"static/media/lizard-src.e5ff92d7.png\";","module.exports = __webpack_public_path__ + \"static/media/reptile-src.25aa1c47.png\";","module.exports = __webpack_public_path__ + \"static/media/snake-src.be32f644.png\";","module.exports = __webpack_public_path__ + \"static/media/turtle-src.d2d1c278.png\";","\n\nexport const fetchBooks = async (searchCriteria) => {\n  const urlParts = \n    [`https://www.googleapis.com/`,\n    `books/v1/volumes?`,\n    `q=${searchCriteria}`,\n    `+nonfiction+children+books`,\n    `&printType=books`,\n    `&filter=partial`,\n    `&startIndex=0`,\n    `&maxResults=40`,\n    ]\n\n  if (searchCriteria === 'turtles') {\n    urlParts.splice(3, 0, '+-mutant+-Michelangelo')\n  }\n  const url = urlParts.join('')\n  try {\n    const response = await fetch(url)\n    const data = await response.json()\n    if(response.ok){\n      return data\n    } else {\n      throw new Error(response.statusText)\n    }\n  } catch (error) {\n    throw new Error(error)\n  }\n}\n\nexport const fetchSingleBook = async (url) => {\n  try {\n    const response = await fetch(url)\n    const data = await response.json()\n    return data\n  } catch (error) {\n    throw new Error(error)\n  }\n}\n\n","import React from 'react'\nimport './BookCard.scss'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types';\n\nconst BookCard = ({ books, category, viewType }) => {\n  const filteredBooks = books.filter(book => book.accessInfo.embeddable === true)\n\n  const createSummaryView = (book, textSnippet) => {\n    return (\n    <div>\n      <h2 className={`book-title ${book.volumeInfo.title.length}`}>{book.volumeInfo.title}</h2>\n      <section className=\"book-description\">\n        <img\n          src={book.volumeInfo.imageLinks.thumbnail}\n          alt={book.volumeInfo.title + \" cover\"}\n        />\n        <p className=\"text-snippet\"\n          dangerouslySetInnerHTML={{ __html: textSnippet }} />\n      </section>\n      <p>{book.volumeInfo.authors}</p>\n    </div>)\n  }\n\n  \n\n  const createCoverView = (book) => {\n    if(book.coverImg) {\n      return (\n        <img\n          src={book.coverImg.medium}\n          alt={book.volumeInfo.title + \" cover\"}\n        />\n      )\n    } else {\n      return (\n        <img\n          src={book.volumeInfo.imageLinks.thumbnail}\n          alt={book.volumeInfo.title + \" cover\"}\n        />\n      )\n    }\n  }\n\n  return filteredBooks.map((book, i) => {\n    const textSnippet = book.searchInfo ? book.searchInfo.textSnippet : \"No description available!\";\n    return (\n      <div key={i+ 'book-info'} className=\"book-info\">\n        {viewType === 'CoverView' && createCoverView(book,i)}\n        {viewType === 'SummaryView' && createSummaryView(book, textSnippet)}\n\n        <Link to={`/${category}/EmbeddedBook/${book.id}`} style={{textDecoration: \"none\"}}>\n          <button aria-label={`Start Reading ${book.volumeInfo.title}`}>START READING</button>\n        </Link>\n      </div>\n    )\n  })\n}\n\n\nBookCard.propTypes = {\n  books: PropTypes.array,\n  category: PropTypes.string,\n  viewType: PropTypes.string\n};\n\n\nexport default BookCard","import React from 'react'\nimport './Inventory.scss'\nimport { Link } from 'react-router-dom'\nimport BookCard from '../BookCard/BookCard'\nimport PropTypes from 'prop-types'\n\nconst Inventory = ({ books, category, singleBooks, getSingleBooks, viewType, setBooks}) => {\n  const upperCaseCategory = category[0].toUpperCase() + category.slice(1) \n  const categorySingular = upperCaseCategory.slice(0, upperCaseCategory.length -1)\n\n  return (\n    <>\n      {viewType === 'SummaryView' && \n      <Link to= {`/${category}/CoverView`}>\n        <button \n        className=\"cover-btn\" \n        onClick={() => {\n          setBooks([])\n          getSingleBooks()\n        }}>\n        Book Covers</button>\n      </Link>}\n      {viewType === 'CoverView' && \n      <Link to= {`/${category}/SummaryView`}>\n        <button className=\"cover-btn\">Summaries</button>\n      </Link>}\n      <div className=\"book-container\" >\n        {books.length && \n        <BookCard \n        books={books} \n        category={category} \n        images={singleBooks} \n        viewType={viewType} />}\n      </div>\n    </>\n  )\n}\n\nInventory.propTypes = {\n  books: PropTypes.array, \n  category: PropTypes.string, \n  singleBooks: PropTypes.func, \n  getSingleBooks: PropTypes.func, \n  viewType: PropTypes.string, \n  setBooks: PropTypes.func\n};\n\nexport default Inventory","import React from 'react'\nimport { useHistory} from 'react-router-dom' \nimport './EmbeddedBook.scss'\nimport PropTypes from 'prop-types'\nconst EmbeddedBook = ({bookToRender}) => {\n  const previewLink = bookToRender.volumeInfo.previewLink + '&output=embed'\n  let history = useHistory();\n\n  return (\n    <section className=\"embedded-book-section\">\n        <button \n        aria-label={`Go Back To Home Page`}\n        onClick= {() => history.goBack()}>\n        ⬅ GO BACK\n        </button>\n      {previewLink.length && \n      <iframe \n        frameBorder=\"0\" \n        scrolling=\"no\" \n        style={{ border: 0 }} \n        src={previewLink} \n        width=\"600\"\n        height=\"700 \" \n        role=\"document\"\n        title={bookToRender.volumeInfo.title}\n      ></iframe> }\n    </section>\n  )\n  \n}\n\nEmbeddedBook.propTypes = {\n  bookToRender: PropTypes.object\n};\n\nexport default EmbeddedBook","import React from 'react'\nimport './Header.scss'\nimport { NavLink, useLocation } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport crocodile from '../../Assets/crocodile-src.png'\nimport lizard from '../../Assets/lizard-src.png'\nimport reptile from '../../Assets/reptile-src.png'\nimport snake from '../../Assets/snake-src.png'\nimport turtle from '../../Assets/turtle-src.png'\n\nconst Header = ({ searchBooks, getSingleBooks}) => {\n  const location = useLocation()\n  const viewType = location.pathname.split('/')[2]\n  const urlCategory = location.pathname.split('/')[1]\n \n\n  const updateLocation = (event) => {\n    const category = event.target.innerHTML\n    if(viewType === \"CoverView\" && category === urlCategory) {\n      getSingleBooks(category)\n    } else {\n     searchBooks(category)\n    }\n\n  }\n\n  const makeNavLinks = (images) => {\n    const categories = ['crocodiles', 'lizards', 'reptiles', 'snakes', 'turtles']\n    const imageSrcs = [crocodile, lizard, reptile, snake, turtle]\n    const navLinks = categories.map((category,i) => {\n      return (\n        <section className=\"button-and-image\" key={category + 'button'}>\n          <img src={imageSrcs[i]} alt={category} />\n        <NavLink \n          to={`/${category}/${viewType}`} \n          activeClassName='active'>\n          <button className=\"nav-link-btn\"\n          onClick={(event) => updateLocation(event)}>\n          {category}\n          </button>\n        </NavLink>\n        </section>\n      ) \n    })\n    return (\n      navLinks\n    )\n  }\n\n  return (\n    <header>\n      <h1>Reptiles Everywhere!</h1>\n      <div className=\"reptile-image\">{makeNavLinks()}</div>\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  searchBooks: PropTypes.func,\n  getSingleBooks: PropTypes.func\n};\n\nexport default Header","import React, { useEffect, useState } from 'react'\nimport './App.scss'\nimport { fetchBooks, fetchSingleBook } from '../../ApiCalls'\nimport Inventory from '../Inventory/Inventory'\nimport EmbeddedBook from '../EmbeddedBook/EmbeddedBook'\nimport Header from '../Header/Header'\nimport { Route, Redirect, useLocation} from 'react-router-dom' \n\nfunction App() {\n  const location = useLocation();\n  const category = location ? location.pathname.split('/')[1] : 'reptiles'\n  const [books, setBooks] = useState([])\n  const [error, setError] = useState('')\n  const [searchCritera, setSearchCriteria] = useState(category)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const getBooks = async () => {\n      try {\n        const data = await fetchBooks(searchCritera)\n        setBooks(data.items)\n        setLoading(false)\n      } catch (error) {\n        setError(error)\n      }\n    }\n    getBooks()\n  }, [searchCritera])\n\n  \n\n  const getSingleBooks = (categoryGiven) => {\n    const urls = books.map(book => book.selfLink)\n    urls.forEach(async (url) => await getSingleBook(url))\n  }\n\n  const getSingleBook = async (url) => {\n    setBooks([])\n    try {\n      const singleBook = await fetchSingleBook(url)\n      const bookToAddImg = books.find(book => book.id === singleBook.id)\n      const booksWithImgs = { ...bookToAddImg, coverImg: singleBook.volumeInfo.imageLinks}\n      setBooks(s => [...s, booksWithImgs])\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  const searchBooks = (id) => {\n    setSearchCriteria(id) \n  }\n\n  return (\n    <main className=\"App\">\n    {error && <h1 className=\"error-message\">Reptiles are eating! Check back in a minute to see if they are done.</h1>}\n    <Header \n    getSingleBooks={getSingleBooks}\n    searchBooks = {searchBooks}/>\n    {loading && !error && <h1>Loading...</h1>}\n    {books.length > 0 && (\n      <Route\n        path=\"/:category/:viewType\"\n        render={({ match }) => {\n          const { category } = match.params\n          const { viewType } = match.params\n          if (viewType !== \"EmbeddedBook\"){\n            return (\n            <Inventory \n            setBooks={setBooks}\n            books={books} \n            category={category}\n            getSingleBooks={getSingleBooks}\n            viewType = {viewType}\n            /> )\n          }\n        }}\n      />\n    )}\n      {books.length > 0 && <Route\n        path=\"/:category/EmbeddedBook/:id\"\n        render={({ match }) => {\n          const { id, category } = match.params\n          const bookToRender = books.find(\n            (book) => book.id === id\n          ) \n          if(!bookToRender) {\n            searchBooks(category)\n          }\n          return (\n          <EmbeddedBook \n            bookToRender={bookToRender} \n            getSingleBook={getSingleBook}/>)\n        }}\n      />}\n      <Route path='/'>\n        <Redirect to='/reptiles/SummaryView' />\n      </Route>\n    </main>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <BrowserRouter>\n      <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}